%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2382 815
%%HiResBoundingBox: 0 0 2382 814.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2382 814.07996 re
W
q
[0.24 0 0 -0.24 0 814.07996] cm
q
0 0 9925 3390.625 re
W*
q
[27.569134 0 0 27.566057 275.74689 275.66055] cm
q
0 98 340 5 re
W
[340.000024 0 0 5 0.00000032607 98.000007] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.000001 def
/xMax 1 def
/yMax 0.999998 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.588 mul 0 add
1 index 1 exp 0.404 mul 0.408 add
2 index 1 exp -0.079 mul 0.22 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[31.328562 0 0 31.325066 87.77552 145.348312] cm
/DeviceRGB {} CS
[0.0157 0.6314 0.0941] SC
/DeviceRGB {} cs
[0.0157 0.6314 0.0941] sc
14 20 m
9.605412 20 6 23.605412 6 28 c
6 32.394588 9.605412 36 14 36 c
14.094935 36 14.18707 36.003345 14.28125 36 c
20.03125 74.28125 l
20.047989 74.399048 20.075024 74.514435 20.112354 74.627403 c
20.149685 74.740372 20.196722 74.849152 20.253464 74.953728 c
20.310205 75.058304 20.375757 75.157036 20.450119 75.249908 c
20.524481 75.342789 20.606476 75.428352 20.696106 75.506607 c
20.785734 75.584846 20.881584 75.654541 20.983652 75.715683 c
21.08572 75.776833 21.192394 75.828461 21.303675 75.870575 c
21.414955 75.912682 21.529085 75.944611 21.646063 75.966354 c
21.763042 75.988098 21.881021 75.999313 22 76 c
42 76 l
42.00386 76.005127 42.027378 75.994881 42.03125 76 c
43.860947 78.419945 46.750916 80 50 80 c
53.249084 80 56.139053 78.419945 57.96875 76 c
57.972622 75.994881 57.99614 76.005127 58 76 c
78 76 l
78.11898 75.999321 78.236954 75.988106 78.353935 75.966362 c
78.470909 75.944618 78.585037 75.912697 78.696327 75.87059 c
78.807602 75.828484 78.914276 75.776855 79.01635 75.715714 c
79.118416 75.654572 79.214264 75.584877 79.303894 75.506622 c
79.393524 75.428368 79.475517 75.342804 79.549881 75.249924 c
79.624237 75.157051 79.689789 75.058319 79.746536 74.953743 c
79.803276 74.849159 79.850319 74.740379 79.88765 74.627411 c
79.92498 74.514435 79.952011 74.399048 79.96875 74.28125 c
85.71875 36 l
85.812927 36.003345 85.905067 36 86 36 c
90.394592 36 94 32.394588 94 28 c
94 23.605412 90.394592 20 86 20 c
81.605415 20 78 23.605412 78 28 c
78 30.456274 79.110924 32.681679 80.875 34.15625 c
62.46875 50.875 l
53.15625 35.34375 l
55.994251 34.105816 58 31.271854 58 28 c
58 23.605412 54.394588 20 50 20 c
45.605412 20 42 23.605412 42 28 c
42 31.271854 44.005749 34.105816 46.84375 35.34375 c
37.53125 50.875 l
19.125 34.15625 l
20.889074 32.681679 22 30.456274 22 28 c
22 23.605412 18.394588 20 14 20 c
h
14 24 m
16.232828 24 18 25.767172 18 28 c
18 30.232828 16.232828 32 14 32 c
11.767172 32 10 30.232828 10 28 c
10 25.767172 11.767172 24 14 24 c
h
50 24 m
52.232826 24 54 25.767172 54 28 c
54 30.211641 52.26506 31.967108 50.0625 32 c
50.041668 31.999674 50.020832 31.999674 50 32 c
49.957626 32 49.917023 32.001255 49.875 32 c
47.702763 31.935074 46 30.190453 46 28 c
46 25.767172 47.767174 24 50 24 c
h
86 24 m
88.232826 24 90 25.767172 90 28 c
90 30.232828 88.232826 32 86 32 c
83.767174 32 82 30.232828 82 28 c
82 25.767172 83.767174 24 86 24 c
h
50 37.90625 m
60.28125 55.03125 l
60.319469 55.094322 60.361053 55.155094 60.406002 55.21357 c
60.450951 55.272045 60.498989 55.327862 60.550114 55.381027 c
60.601234 55.434185 60.655128 55.484364 60.711803 55.531567 c
60.768475 55.578766 60.827579 55.622696 60.889114 55.663361 c
60.950645 55.704018 61.014233 55.741158 61.079876 55.774784 c
61.145519 55.808418 61.212818 55.838326 61.281769 55.86451 c
61.350719 55.89069 61.420906 55.912991 61.492325 55.931412 c
61.56374 55.949829 61.635956 55.964252 61.708973 55.974686 c
61.781982 55.985111 61.855343 55.991482 61.929062 55.993797 c
62.002777 55.996109 62.076397 55.994354 62.149925 55.988529 c
62.22345 55.982697 62.296425 55.972832 62.368855 55.958935 c
62.441288 55.94503 62.512733 55.927177 62.583195 55.905373 c
62.653648 55.883564 62.722687 55.857937 62.790306 55.828491 c
62.857929 55.799049 62.923725 55.765968 62.987694 55.729252 c
63.051655 55.692528 63.1134 55.652393 63.17292 55.608845 c
63.232449 55.565296 63.289391 55.518597 63.34375 55.46875 c
81.21875 39.21875 l
77.5 64 l
58 64 l
57.99614 63.994873 57.972622 64.005119 57.96875 64 c
56.139053 61.580055 53.249084 60 50 60 c
46.750916 60 43.860947 61.580055 42.03125 64 c
42.027378 64.005119 42.00386 63.994873 42 64 c
22.5 64 l
18.78125 39.21875 l
36.65625 55.46875 l
36.710606 55.518597 36.767548 55.565296 36.827068 55.608845 c
36.886589 55.652393 36.948334 55.692528 37.012299 55.729248 c
37.07626 55.765968 37.142052 55.799049 37.209675 55.828491 c
37.277298 55.857937 37.34634 55.88356 37.416798 55.905369 c
37.487251 55.92717 37.558697 55.945023 37.63113 55.958927 c
37.703564 55.972828 37.776543 55.982697 37.850071 55.988529 c
37.923592 55.994354 37.997211 55.996109 38.070927 55.993797 c
38.144646 55.991482 38.21801 55.985111 38.291027 55.974686 c
38.36404 55.964252 38.436256 55.949829 38.507671 55.931408 c
38.579086 55.912991 38.649269 55.89069 38.71822 55.86451 c
38.78717 55.838322 38.854465 55.808414 38.920105 55.774784 c
38.985748 55.741158 39.049339 55.704018 39.110874 55.663357 c
39.172409 55.622696 39.231514 55.578762 39.288189 55.531563 c
39.34486 55.484364 39.398758 55.434185 39.449883 55.381027 c
39.501003 55.327862 39.549038 55.272045 39.593987 55.213573 c
39.638935 55.155098 39.680523 55.094322 39.71875 55.03125 c
50 37.90625 l
h
50 64 m
53.337399 64 56 66.662605 56 70 c
56 73.337395 53.337399 76 50 76 c
46.662601 76 44 73.337395 44 70 c
44 66.662605 46.662601 64 50 64 c
h
23.125 68 m
40.21875 68 l
40.084942 68.649361 40 69.312607 40 70 c
40 70.687393 40.084942 71.350647 40.21875 72 c
23.71875 72 l
23.125 68 l
h
59.78125 68 m
76.875 68 l
76.28125 72 l
59.78125 72 l
59.915062 71.350647 60 70.687393 60 70 c
60 69.312607 59.915062 68.649361 59.78125 68 c
h
f
Q
q
[21.725842 0 0 21.723417 3553.9312 689.88947] cm
q
13.027 40.390629 m
6.972301 40.390629 2.246 37.480431 1.386001 32.187531 c
7.440701 30.800831 l
7.831331 33.964931 10.1555 35.60553 13.261001 35.60553 c
15.643801 35.60553 17.5383 34.550831 17.518801 32.16803 c
17.499269 29.51173 14.374301 28.67193 10.936801 27.617229 c
6.796201 26.328129 2.362601 24.804729 2.362601 19.609428 c
2.362601 14.355528 6.659501 11.386728 12.323502 11.386728 c
17.284401 11.386728 22.284401 13.398428 23.417501 18.808628 c
17.753401 20.214928 l
17.226061 17.402428 15.331501 16.171928 12.675301 16.171928 c
10.312 16.171928 8.300301 17.148489 8.300301 19.472729 c
8.300301 21.640728 11.073701 22.363329 14.276901 23.320429 c
18.534702 24.609529 23.573801 26.25013 23.573801 31.87513 c
23.573801 37.871231 18.554302 40.390732 13.026801 40.390732 c
13.027 40.390629 l
h
47.685234 11.777 m
53.544632 11.777 l
53.544632 40 l
47.685234 40 l
47.685234 28.397999 l
35.751236 28.397999 l
35.751236 40 l
29.891836 40 l
29.891836 11.777 l
35.751236 11.777 l
35.751236 23.299999 l
47.685234 23.299999 l
47.685234 11.777 l
47.685234 11.777 l
h
74.257469 40.390629 m
65.956665 40.390629 59.823471 34.726528 59.823471 25.878628 c
59.823471 17.011429 65.956268 11.386628 74.257469 11.386628 c
82.538773 11.386628 88.671471 17.011627 88.671471 25.878628 c
88.671471 34.726326 82.538673 40.390629 74.257469 40.390629 c
h
74.257469 35.019501 m
79.120766 35.019501 82.851273 31.601501 82.851273 25.878901 c
82.851273 20.1758 79.120773 16.777302 74.257477 16.777302 c
69.39418 16.777302 65.663681 20.175701 65.663681 25.878902 c
65.663681 31.601603 69.39418 35.019501 74.257477 35.019501 c
74.257469 35.019501 l
h
106.709358 11.777 m
112.236656 11.777 115.674156 15.878601 115.674156 20.898102 c
115.674156 26.034801 112.236656 29.882502 106.709358 29.882502 c
100.83046 29.882502 l
100.83046 39.9995 l
94.971062 39.9995 l
94.971062 11.776501 l
106.709061 11.776501 l
106.709358 11.777 l
h
105.732361 24.98 m
108.662064 24.98 110.029259 23.3589 110.029259 20.819799 c
110.029259 18.378399 108.662056 16.679199 105.732361 16.679199 c
100.830063 16.679199 l
100.830063 24.98 l
105.732361 24.98 l
h
130.878555 40.390629 m
124.823853 40.390629 120.097557 37.480431 119.237556 32.187531 c
125.292259 30.800831 l
125.682892 33.964931 128.007065 35.60553 131.112564 35.60553 c
133.495361 35.60553 135.389862 34.550831 135.370361 32.16803 c
135.35083 29.51173 132.225861 28.67193 128.788361 27.617229 c
124.647758 26.328129 120.214157 24.804729 120.214157 19.609428 c
120.214157 14.355528 124.511055 11.386728 130.175064 11.386728 c
135.135971 11.386728 140.135971 13.398428 141.269058 18.808628 c
135.604965 20.214928 l
135.077621 17.402428 133.18306 16.171928 130.526871 16.171928 c
128.163574 16.171928 126.151871 17.148489 126.151871 19.472729 c
126.151871 21.640728 128.925278 22.363329 132.128464 23.320429 c
136.386261 24.609529 141.425369 26.25013 141.425369 31.87513 c
141.425369 37.871231 136.405869 40.390732 130.878372 40.390732 c
130.878555 40.390629 l
h
159.482803 11.777 m
165.010101 11.777 168.4476 15.878601 168.4476 20.898102 c
168.4476 26.034801 165.010101 29.882502 159.482803 29.882502 c
153.603897 29.882502 l
153.603897 39.9995 l
147.744492 39.9995 l
147.744492 11.776501 l
159.482498 11.776501 l
159.482803 11.777 l
h
158.505798 24.98 m
161.435501 24.98 162.802704 23.3589 162.802704 20.819799 c
162.802704 18.378399 161.435501 16.679199 158.505798 16.679199 c
153.6035 16.679199 l
153.6035 24.98 l
158.505798 24.98 l
h
193.164 40 m
191.1132 34.179699 l
179.25821 34.179699 l
177.20741 40 l
171.21132 40 l
181.60233 11.777 l
188.77032 11.777 l
199.16133 40 l
193.16524 40 l
193.164 40 l
h
180.97701 29.277 m
189.395 29.277 l
185.1958 17.304001 l
180.97701 29.277 l
h
219.20929 40 m
211.86549 27.577999 l
210.16629 27.577999 l
210.16629 40 l
204.30688 40 l
204.30688 11.777 l
214.54088 11.777 l
220.92758 11.777 223.62288 15.5465 223.62288 20.2145 c
223.62288 24.003601 221.47447 26.4645 217.64629 27.284801 c
226.14238 39.999802 l
219.20879 39.999802 l
219.20929 40 l
h
210.166 16.641001 m
210.166 23.379301 l
213.623 23.379301 l
216.748 23.379301 218.0175 22.051201 218.0175 20.019901 c
218.0175 18.008202 216.748 16.641001 213.623 16.641001 c
210.166 16.641001 l
h
248.04732 40 m
239.27782 28.007999 l
237.20752 28.007999 l
237.20752 40 l
231.34811 40 l
231.34811 11.777 l
237.20752 11.777 l
237.20752 22.871 l
239.19972 22.871 l
248.04742 11.777 l
255.19583 11.777 l
244.25783 25.273001 l
255.52783 40 l
248.04733 40 l
248.04732 40 l
h
270.00943 40.390629 m
263.95474 40.390629 259.22842 37.480431 258.36844 32.187531 c
264.42313 30.800831 l
264.81375 33.964931 267.13794 35.60553 270.24344 35.60553 c
272.62625 35.60553 274.52075 34.550831 274.50125 32.16803 c
274.48172 29.51173 271.35675 28.67193 267.91925 27.617229 c
263.77866 26.328129 259.34506 24.804729 259.34506 19.609428 c
259.34506 14.355528 263.64197 11.386728 269.30597 11.386728 c
274.26688 11.386728 279.26688 13.398428 280.39996 18.808628 c
274.73587 20.214928 l
274.20853 17.402428 272.31396 16.171928 269.65778 16.171928 c
267.29446 16.171928 265.28278 17.148489 265.28278 19.472729 c
265.28278 21.640728 268.05618 22.363329 271.25937 23.320429 c
275.51718 24.609529 280.55627 26.25013 280.55627 31.87513 c
280.55627 37.871231 275.53677 40.390732 270.00928 40.390732 c
270.00943 40.390629 l
h
W
[279.170295 0 0 29.004106 1.386003 11.386631] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.588 mul 0 add
1 index 1 exp 0.404 mul 0.408 add
2 index 1 exp -0.079 mul 0.22 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[41.025497 0 0 41.02092 3584.0432 1647.56567] cm
/DeviceRGB {} CS
[0.0157 0.6314 0.0941] SC
/DeviceRGB {} cs
[0.0157 0.6314 0.0941] sc
0 20 m
0 5 l
1.28 5 l
1.28 20 l
0 20 l
h
3.22 20 m
3.22 5 l
4.3 5 l
4.3 18.92 l
9.4 18.92 l
9.4 20 l
3.22 20 l
3.22 20 l
h
10.520001 20 m
10.520001 5 l
11.6 5 l
11.6 18.92 l
16.700001 18.92 l
16.700001 20 l
10.520001 20 l
h
21.059999 20.18 m
19.8333 20.18 18.8832 19.84664 18.209999 19.18 c
17.536798 18.513361 17.199999 17.526701 17.199999 16.220001 c
17.199999 5.000001 l
18.279999 5.000001 l
18.279999 16.16 l
18.279999 16.479999 18.323339 16.81666 18.409998 17.17 c
18.496656 17.52334 18.646658 17.84334 18.859999 18.130001 c
19.073339 18.416662 19.356678 18.65332 19.710018 18.839981 c
20.063358 19.026642 20.500019 19.119982 21.020018 19.119982 c
21.593357 19.119982 22.066717 19.036642 22.440018 18.869982 c
22.813318 18.703321 23.113358 18.473322 23.340017 18.179981 c
23.566677 17.886641 23.726677 17.539982 23.820017 17.13998 c
23.913357 16.739979 23.960016 16.31332 23.960016 15.859981 c
23.960016 4.999981 l
25.020016 4.999981 l
25.020016 16.219982 l
25.020016 17.553282 24.696676 18.546581 24.050016 19.199982 c
23.403357 19.853382 22.406715 20.179981 21.060017 20.179981 c
21.059999 20.18 l
h
35.84 20 m
35.84 7.28 l
32.220001 15.94 l
31.1 15.919999 l
27.560001 7.259999 l
27.560001 20 l
26.580002 20 l
26.580002 5 l
27.620003 5 l
31.680002 14.76 l
35.760002 5 l
36.820004 5 l
36.820004 20 l
35.840004 20 l
35.84 20 l
h
38.799999 20 m
38.799999 5 l
40.079998 5 l
40.079998 20 l
38.799999 20 l
h
48.919998 20 m
43.119999 7.12 l
43.119999 20 l
42.02 20 l
42.02 5 l
43.200001 5 l
49 17.299999 l
49.139999 4.999999 l
50.220001 4.999999 l
50.220001 20 l
48.920002 20 l
48.919998 20 l
h
59.599998 20 m
58.5 15.58 l
53.619999 15.58 l
52.52 20 l
51.52 20 l
55.66 5 l
56.52 5 l
60.639999 20 l
59.599998 20 l
h
56.119999 5.94 m
53.860001 14.620001 l
58.240002 14.620001 l
56.119999 5.94 l
h
64.059998 6.1 m
64.059998 20 l
62.899998 20 l
62.899998 6.1 l
59.639999 6.1 l
59.639999 5.000001 l
67.32 5.000001 l
67.32 6.1 l
64.059998 6.1 l
64.059998 6.1 l
h
68.419998 20 m
68.419998 5 l
75.779999 5 l
75.779999 6.16 l
69.459999 6.16 l
69.459999 11.86 l
75.720001 11.86 l
75.720001 12.78 l
69.459999 12.78 l
69.459999 18.84 l
75.919998 18.84 l
75.919998 20 l
68.419998 20 l
h
84.68 20.18 m
84.026657 20.18 83.446503 20.093262 82.939903 19.91992 c
82.433304 19.746578 82.006584 19.469919 81.659904 19.08992 c
81.313225 18.709921 81.056587 18.213261 80.889923 17.59992 c
80.723259 16.98658 80.653259 16.24662 80.679924 15.37992 c
81.879921 15.37992 l
81.879921 15.80658 81.899918 16.24992 81.939919 16.709921 c
81.979919 17.169922 82.086578 17.58992 82.259918 17.969921 c
82.433258 18.349922 82.696602 18.659922 83.049942 18.899921 c
83.403282 19.139921 83.89328 19.259922 84.519943 19.259922 c
85.053284 19.259922 85.506622 19.179922 85.879944 19.019922 c
86.253265 18.859922 86.556625 18.646582 86.789963 18.379923 c
87.0233 18.113264 87.186646 17.799923 87.279984 17.439922 c
87.373322 17.079922 87.419983 16.706583 87.419983 16.319922 c
87.419983 15.866582 87.336639 15.469921 87.169983 15.129921 c
87.003326 14.789921 86.783325 14.486581 86.509979 14.219921 c
86.236633 13.953261 85.916641 13.716601 85.54998 13.509941 c
85.183319 13.303281 84.79998 13.119941 84.399979 12.959941 c
83.759979 12.706601 83.199982 12.456601 82.719978 12.209941 c
82.239975 11.963281 81.846642 11.686621 81.539978 11.379961 c
81.233315 11.073301 81.003319 10.716641 80.849976 10.309961 c
80.696632 9.903282 80.619972 9.406641 80.619972 8.819962 c
80.619972 7.486661 80.969971 6.493362 81.669975 5.839962 c
82.36998 5.186562 83.373276 4.859962 84.679977 4.859962 c
85.813278 4.859962 86.709976 5.189961 87.36998 5.849961 c
88.029984 6.509961 88.359978 7.499961 88.359978 8.819962 c
88.359978 9.919962 l
87.239975 9.919962 l
87.239975 8.719962 l
87.239975 8.306623 87.189972 7.923282 87.089973 7.569962 c
86.989975 7.216642 86.833313 6.906622 86.619972 6.639962 c
86.406631 6.373303 86.136635 6.163302 85.809975 6.009962 c
85.483315 5.856622 85.093315 5.779962 84.639977 5.779962 c
83.573273 5.779962 82.809975 6.059962 82.349976 6.619962 c
81.889977 7.179962 81.679977 7.933262 81.719978 8.879962 c
81.733322 9.293302 81.809975 9.646642 81.949982 9.939962 c
82.089989 10.233283 82.276642 10.489963 82.509979 10.709963 c
82.743317 10.929963 83.023315 11.126623 83.349976 11.299963 c
83.676636 11.473303 84.039978 11.646643 84.439972 11.819983 c
84.906631 12.019982 85.369972 12.233322 85.829971 12.459983 c
86.28997 12.686644 86.719971 12.966642 87.119972 13.299983 c
87.519974 13.646643 87.849976 14.049983 88.10997 14.509983 c
88.369965 14.969983 88.499969 15.539983 88.499969 16.219982 c
88.499969 17.539982 88.163307 18.529982 87.489967 19.189981 c
86.816628 19.849981 85.879967 20.179981 84.67997 20.179981 c
84.68 20.18 l
h
96.440002 20 m
96.420006 13.020001 l
90.940002 13.020001 l
90.959999 20 l
89.799995 20 l
89.799995 5 l
90.959999 5 l
90.940002 11.96 l
96.420006 11.96 l
96.440002 5 l
97.620003 5 l
97.620003 20 l
96.440002 20 l
h
102.959999 20.18 m
100.440002 20.18 99.18 18.860001 99.18 16.220001 c
99.18 8.820002 l
99.18 7.486702 99.496658 6.493402 100.129997 5.840002 c
100.763336 5.186602 101.786697 4.860002 103.199997 4.860002 c
104.493294 4.860002 105.449997 5.190001 106.07 5.850001 c
106.690002 6.510001 107 7.486701 107 8.780002 c
107 16.220001 l
107 16.886662 106.93 17.466702 106.790001 17.960001 c
106.650002 18.4533 106.419998 18.86668 106.099998 19.200001 c
105.779999 19.533321 105.363342 19.780001 104.849998 19.940001 c
104.336655 20.1 103.706696 20.18 102.959999 20.18 c
h
105.940002 8.76 m
105.940002 8.426661 105.893364 8.08662 105.800026 7.74 c
105.706688 7.39338 105.553345 7.07668 105.340004 6.79002 c
105.126663 6.50336 104.843323 6.27002 104.489983 6.09002 c
104.136642 5.91002 103.699982 5.82002 103.179985 5.82002 c
102.606644 5.82002 102.129982 5.90002 101.749985 6.06002 c
101.369987 6.220021 101.069984 6.44336 100.849983 6.730021 c
100.629982 7.016681 100.47332 7.353341 100.379982 7.740021 c
100.286644 8.126701 100.239983 8.546681 100.239983 9.000021 c
100.239983 16.100021 l
100.239983 16.446682 100.279984 16.800022 100.359985 17.160021 c
100.439987 17.52002 100.583328 17.850021 100.789986 18.150021 c
100.996643 18.45002 101.276649 18.69668 101.629982 18.89002 c
101.983315 19.083361 102.426659 19.180021 102.959984 19.180021 c
103.533325 19.180021 104.009987 19.103361 104.389984 18.950022 c
104.769981 18.796682 105.073326 18.586681 105.299988 18.320023 c
105.526649 18.053364 105.689987 17.736702 105.789986 17.370043 c
105.889984 17.003384 105.939987 16.606722 105.939987 16.180042 c
105.939987 8.760042 l
105.940002 8.76 l
h
112 14.36 m
109.839996 14.36 l
109.839996 20 l
108.679993 20 l
108.679993 5 l
112.299995 5 l
113.619995 5 114.656593 5.40334 115.409996 6.21 c
116.163399 7.01666 116.539993 8.1867 116.539993 9.72 c
116.539993 10.400001 116.429993 11.0233 116.209991 11.59 c
115.98999 12.1567 115.679993 12.6467 115.279991 13.06 c
114.87999 13.473301 114.403328 13.793341 113.849991 14.020001 c
113.296654 14.24666 112.679993 14.360001 111.999992 14.360001 c
112 14.36 l
h
111.900002 6.02 m
109.840004 6.020019 l
109.840004 13.260019 l
111.700005 13.260019 l
112.380005 13.260019 112.953308 13.16336 113.420006 12.970019 c
113.886703 12.776679 114.263329 12.51668 114.550003 12.19002 c
114.836678 11.86336 115.04332 11.483359 115.169983 11.050019 c
115.296646 10.616679 115.359985 10.160019 115.359985 9.680019 c
115.359985 9.18668 115.313324 8.71668 115.219986 8.27002 c
115.126648 7.82336 114.953308 7.43336 114.699966 7.100019 c
114.446625 6.766679 114.093285 6.503339 113.639969 6.31 c
113.186653 6.11666 112.606667 6.02 111.899971 6.02 c
111.900002 6.02 l
h
121.199997 14.36 m
119.039993 14.36 l
119.039993 20 l
117.87999 20 l
117.87999 5 l
121.499992 5 l
122.819992 5 123.85659 5.40334 124.609993 6.21 c
125.363396 7.01666 125.73999 8.1867 125.73999 9.72 c
125.73999 10.400001 125.62999 11.0233 125.409988 11.59 c
125.189987 12.1567 124.87999 12.6467 124.479988 13.06 c
124.079987 13.473301 123.603325 13.793341 123.049988 14.020001 c
122.496651 14.24666 121.87999 14.360001 121.199989 14.360001 c
121.199997 14.36 l
h
121.099998 6.02 m
119.040001 6.020019 l
119.040001 13.260019 l
120.900002 13.260019 l
121.580002 13.260019 122.153305 13.16336 122.620003 12.970019 c
123.0867 12.776679 123.463326 12.51668 123.75 12.19002 c
124.036674 11.86336 124.243317 11.483359 124.36998 11.050019 c
124.496643 10.616679 124.559982 10.160019 124.559982 9.680019 c
124.559982 9.18668 124.513321 8.71668 124.419983 8.27002 c
124.326645 7.82336 124.153305 7.43336 123.899963 7.100019 c
123.646622 6.766679 123.293282 6.503339 122.839966 6.31 c
122.38665 6.11666 121.806664 6.02 121.099968 6.02 c
121.099998 6.02 l
h
127.080002 20 m
127.080002 5 l
128.360001 5 l
128.360001 20 l
127.080002 20 l
h
137.199997 20 m
131.399994 7.12 l
131.399994 20 l
130.299988 20 l
130.299988 5 l
131.47998 5 l
137.279984 17.299999 l
137.419983 4.999999 l
138.499985 4.999999 l
138.499985 20 l
137.199982 20 l
137.199997 20 l
h
143.820007 20.18 m
142.553314 20.18 141.606613 19.846661 140.980011 19.18 c
140.353409 18.51334 140.040009 17.526701 140.040009 16.220001 c
140.040009 8.820002 l
140.040009 7.486702 140.353348 6.493402 140.980011 5.840002 c
141.606674 5.186602 142.62001 4.860002 144.020004 4.860002 c
145.340012 4.860002 146.30661 5.190001 146.919998 5.850001 c
147.533386 6.510001 147.839996 7.486701 147.839996 8.780002 c
147.839996 9.860002 l
146.759995 9.860002 l
146.759995 8.580002 l
146.759995 8.246662 146.720001 7.910002 146.639999 7.570002 c
146.559998 7.230001 146.416656 6.920002 146.210007 6.640001 c
146.003357 6.360001 145.720001 6.133341 145.360001 5.960002 c
145 5.786662 144.539993 5.700002 143.979996 5.700002 c
143.419998 5.700002 142.956696 5.776662 142.589996 5.930002 c
142.223297 6.083342 141.929993 6.300002 141.709991 6.580002 c
141.48999 6.860002 141.333328 7.190002 141.23999 7.570002 c
141.146652 7.950001 141.099991 8.366661 141.099991 8.820002 c
141.099991 16.300001 l
141.099991 16.766661 141.146652 17.183321 141.23999 17.550001 c
141.333328 17.916681 141.48999 18.226662 141.709991 18.480001 c
141.929993 18.733341 142.216644 18.926682 142.569992 19.060022 c
142.92334 19.193363 143.353333 19.260023 143.859985 19.260023 c
144.419983 19.260023 144.886688 19.190023 145.259979 19.050024 c
145.63327 18.910025 145.933319 18.713364 146.159973 18.460024 c
146.386627 18.206684 146.549973 17.900024 146.649979 17.540024 c
146.749985 17.180023 146.799973 16.786684 146.799973 16.360023 c
146.799973 13.420023 l
143.659973 13.400023 l
143.659973 12.420023 l
147.839966 12.440023 l
147.839966 16.220024 l
147.839966 17.540024 147.53331 18.530024 146.919968 19.190023 c
146.306625 19.850023 145.27327 20.180023 143.819962 20.180023 c
143.820007 20.18 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
